unit pgunit;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, pqconnection, sqldb, db, FileUtil, Forms, Controls,
  Graphics, Dialogs, DBGrids, StdCtrls;

type

  { TForm1 }

  TForm1 = class(TForm)
    Button1: TButton;
    Button2: TButton;
    DataSource1: TDataSource;
    DBConnection: TPQConnection;
    DBGrid1: TDBGrid;
    Edit1: TEdit;
    Label1: TLabel;
    ListBox1: TListBox;
    SQLQuery1: TSQLQuery;
    SQLTransaction1: TSQLTransaction;
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure FormClose(Sender: TObject; var CloseAction: TCloseAction);
  private
    { private declarations }
    const

      count_ware = 2; // can be changed as the company expand

      MAXITEMS = 100000;

      CUST_PER_DIST = 3000;
      DIST_PER_WARE = 10;
      ORD_PER_DIST = 3000;

      function MakeNumberString(x, y: Integer; out stNumber:string): Integer;
      function MakeAlphaString(x, y: Integer; out st:string): Integer;
      procedure MakeAddress( out str1, str2, city, state, zip: string );
      procedure Lastname(num: Integer; out Lastname: string); // num between 0 and 999
      function NURand(A: Integer; x, y: Integer): Integer;

      procedure loaditems;
      procedure Stock( w_id: Integer );
      procedure Customer( d_id , w_id: Integer );
      procedure District( w_id: Integer );
      procedure LoadWare();
      procedure Orders(d_id, w_id: Integer);
      procedure LoadOrd();
      function new_order(c_id: Integer; w_id: Integer; d_id: Integer): Integer; // The New-Order Transaction
      function payment(w_id: Integer; d_id: Integer;
                       h_amount: double; ByName: boolean;
                       c_w_id: Integer; c_d_id: Integer;
                       c_id: Integer; c_Last: string): Integer; // The Payment Transaction
      function order_status(byName: boolean; c_id: Integer; c_last: string;
                            d_id: Integer; w_id: Integer): Integer; // The Order-Status Transaction
      function delivery(w_id: Integer): Integer; // The Delivery Transaction
      function stock_level(w_id: Integer; d_id: Integer): Integer; // The Stock-Level Transaction
  public
    { public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.lfm}

{ TForm1 }

function TForm1.MakeNumberString(x, y: Integer; out stNumber:string): Integer;
var
  range: Integer;
  value: integer;
  i: integer;
begin
  stNumber := '';
  range := y - x;
  //randomize;
  value := random(range);
  result := x + value;
  for i := 1 to result do
    stNumber := stNumber + chr(random(10)+48);
end;

function TForm1.MakeAlphaString(x, y: Integer; out st:string): Integer;
var
  range: Integer;
  value: integer;
  i: integer;
begin
  st := '';
  range := y - x + 1;
  // randomize;
  value := random(range);
  result := x + value;
  for i := 1 to result do
    st := st + chr(random(26)+65);
end;

(* ==================================================================+
| ROUTINE NAME
|
MakeAddress()
| DESCRIPTION
|
Build an Address
| ARGUMENTS

| W_STREET_1 random string [10 .. 20]
| W_STREET_2 random string [10 .. 20]
| W_CITY random string [10 .. 20]
| W_STATE rand om string of 2 letters
| W_ZIP generated according to:
| The zip code must be generated by the concatenation of:
    1. A random string of 4 numbers, and
    2. The constant string '11111'.
  Given a random string between 0 and 9999, the zip codes are determined by
  concatenating the string and the constant '11111'.
  This will create 10,000 unique zip codes.
  For example, the string 0503 concatenated with 11111,
  will make the zip code 050311111.
  Comment: With 30,000 customers per warehouse and 10,000 zip codes available,
             there will be an average of 3 customers per warehouse with the
             same zip code.
+================================================================== *)

procedure TForm1.MakeAddress( out str1, str2, city, state, zip: string );
begin
  MakeAlphaString(10,20,str1); // Street 1
  MakeAlphaString(10,20,str2); // Street 2
  MakeAlphaString(10,20,city); // City
  MakeAlphaString(2,2,state);  // State
  MakeNumberString(4,4,zip);
  zip := zip + '11111'; // Zip
end;

procedure TForm1.loaditems();
var
  orig: array [0..MAXITEMS-1] of boolean;
  i: integer;
  pos: integer;
  i_id: Integer;
  i_name: string;
  i_price: double;
  idatasiz: byte;
  i_data: string;
begin
  for i := 0 to MAXITEMS - 1 do orig[i] := false;

  // randomize;

  for i := 0 to (MAXITEMS div 10) - 1 do
    begin
      repeat
        pos := Random(MAXITEMS);
      until not orig[pos];
      orig[pos] := true;
    end;

  // 100,000 rows in the ITEM table with:
  // I_ID unique within [100,000]
  for i_id := 1 to MAXITEMS do
    begin
      (* Generate Item Data *)
      // I_IM_ID random within [1 .. 10,000]

      // I_NAME random string [14 .. 24]
      MakeAlphaString ( 14, 24, i_name );

      // I_PRICE random within [1.00 .. 100.00]
      i_price := (  random ( 10000 - 100 + 1) + 100 ) / 100;

      (* I_DATA random string [26 .. 50].
           For 10% of the rows, selected at random, the string "ORIGINAL" must
             be held by 8 consecutive characters starting at a random position
             within I_DATA *)
      idatasiz := MakeAlphaString ( 26,50, i_data );
      if ( orig[i_id] ) then
        begin
          pos := Random ( ( idatasiz - 8  ) ) + 1;
          i_data[pos  ] := 'o';
          i_data[pos+1] := 'r';
          i_data[pos+2] := 'i';
          i_data[pos+3] := 'g';
          i_data[pos+4] := 'i';
          i_data[pos+5] := 'n';
          i_data[pos+6] := 'a';
          i_data[pos+7] := 'l';
        end;

      {$IFDEF option_debug}
        // writeln('i_id = ' + intToStr(i_id) + ' i_name = ' + i_name + ' i_price = ' + floatToStr(i_price) + ' i_data = ' + i_data);
      {$ENDIF}

       SQLQuery1.SQL.Text := 'INSERT INTO ITEM ' +
                             '  (i_id,   i_name,   i_price,   i_data)' +
                             ' VALUES ( ' +
                                 intToStr(i_id) + ', ''' + i_name +  ''', ' + floatToStr(i_price) +  ', ''' + i_data +
                             '''        ); ';
      SQLQuery1.ExecSQL();

      if (i_id mod 100 = 0) then
        SQLTransaction1.Commit();

      if (i_id mod 1000 = 0) then
        begin
          ListBox1.Items.Add(intToStr(i_id) + ' Items');
          ListBox1.ItemIndex := ListBox1.Count - 1;
          ListBox1.Refresh;
        end;

    end;

  SQLTransaction1.Commit();

  ListBox1.Items.Add('table Item Loaded.');
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;
{    return;
    sqlerr:
      Error(); }
end;

(* ==================================================================+
| ROUTINE NAME
|
Stock
| DESCRIPTION
|
Loads the Stock table
| ARGUMENTS
|
w_id - warehouse id
+================================================================== *)


procedure TForm1.Stock( w_id: Integer );
var
  s_i_id: Integer;
  s_w_id: Integer;
  s_quantity: Integer;
  s_dist_01: string;
  s_dist_02: string;
  s_dist_03: string;
  s_dist_04: string;
  s_dist_05: string;
  s_dist_06: string;
  s_dist_07: string;
  s_dist_08: string;
  s_dist_09: string;
  s_dist_10: string;
  s_ytd: Integer;
  s_order_cnt: Integer;
  s_remote_cnt: Integer;
  s_data: string;
  sdatasiz: Integer;
  orig: array[1..MAXITEMS] of boolean;
  pos: Integer;
  i: Integer;
begin

  // EXEC SQL WHENEVER SQLERROR GOTO sqlerr;
  ListBox1.Items.Add('Loading Stock Wid = ' + intToStr(w_id));
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;

  for i := 1 to MAXITEMS do orig[i] := false;

  for i := 1 to (MAXITEMS div 10) do
    begin
      repeat
        pos := Random(MAXITEMS) + 1;
      until not orig[pos];
      orig[pos] := true;
    end;

  s_w_id := w_id ;

  // S_I_ID unique within [100,000]
  for s_i_id := 1 to MAXITEMS do
    begin
      //  Generate Stock Data

      // S_QUANTITY random within [10 .. 100]
      s_quantity := Random(100-10+1)+10;

      // S_DIST_01 .. S_DIST_10 random string of 24 letters
      MakeAlphaString(24,24,s_dist_01);
      MakeAlphaString(24,24,s_dist_02);
      MakeAlphaString(24,24,s_dist_03);
      MakeAlphaString(24,24,s_dist_04);
      MakeAlphaString(24,24,s_dist_05);
      MakeAlphaString(24,24,s_dist_06);
      MakeAlphaString(24,24,s_dist_07);
      MakeAlphaString(24,24,s_dist_08);
      MakeAlphaString(24,24,s_dist_09);
      MakeAlphaString(24,24,s_dist_10);

      (* S_DATA random string [26 .. 50]. For 10% of the rows, selected at
           random, the string "ORIGINAL" must be held by 8 consecutive
           characters starting at a random position within S_DATA *)
      sdatasiz := MakeAlphaString(26,50,s_data);
      if (orig[s_i_id]) then
        begin
          pos := Random(sdatasiz-8)+1;
          s_data[pos  ] := 'o';
          s_data[pos+1] := 'r';
          s_data[pos+2] := 'i';
          s_data[pos+3] := 'g';
          s_data[pos+4] := 'i';
          s_data[pos+5] := 'n';
          s_data[pos+6] := 'a';
          s_data[pos+7] := 'l';
        end;

      s_ytd := 0;
      s_order_cnt := 0;
      s_remote_cnt := 0;

      SQLQuery1.SQL.Text := 'INSERT INTO STOCK ' +
                            '  ( S_I_ID, S_W_ID, S_QUANTITY, ' +
                            '    S_DIST_01, S_DIST_02, S_DIST_03, S_DIST_04, S_DIST_05, ' +
                            '    S_DIST_06, S_DIST_07, S_DIST_08, S_DIST_09, S_DIST_10, ' +
                            '    S_YTD, S_ORDER_CNT, S_REMOTE_CNT, S_DATA ) ' +
                            ' VALUES ( ' +
                                intToStr(s_i_id) + ', ' + intToStr(s_w_id) + ', ' + intToStr(s_quantity) + ', ''' +
                                s_dist_01 + ''', ''' + s_dist_02 + ''', ''' + s_dist_03 + ''', ''' + s_dist_04 + ''', ''' + s_dist_05 + ''', ''' +
                                s_dist_06 + ''', ''' + s_dist_07 + ''', ''' + s_dist_08 + ''', ''' + s_dist_09 + ''', ''' + s_dist_10 + ''', ' +
                                intToStr(s_ytd) + ', ' + intToStr(s_order_cnt) + ', ' + intToStr(s_remote_cnt) + ', ''' + s_data +
                                '''        ); ';
      SQLQuery1.ExecSQL();

      {$IFDEF option_debug}
        // writeln( 'S_I_ID = ' + intToStr(s_i_id) +  ' S_W_ID = ' + IntToStr(s_w_id) + ' s_QUANTITY = ' + intToStr(s_quantity) );
      {$ENDIF}

       if (s_i_id mod 100 = 0) then
        begin
          Edit1.Text := Edit1.Text + '.';
          Edit1.Refresh;
          SQLTransaction1.Commit();
        end;

      if (s_i_id mod 1000 = 0) then
        begin
          ListBox1.Items.Add(intToStr(s_i_id) + ' Items in Warehouse ' + intToStr(s_w_id));
          ListBox1.ItemIndex := ListBox1.Count - 1;
          ListBox1.Refresh;
          Edit1.Text :='';
          Edit1.Refresh;
        end;

       end;

  SQLTransaction1.Commit();
{ return;
  sqlerr:
  Error(); }
end;

(* ==================================================================+
| ROUTINE NAME
|
Lastname
| DESCRIPTION
|
TPC-C Lastname Function.
| ARGUMENTS
|
num - non-uniform random number
|
name - last name string
+================================================================== *)
procedure TForm1.Lastname(num: Integer; out Lastname: string); // num between 0 and 999
var
  n: array [0..9] of string =
      ( 'BAR', 'OUGHT', 'ABLE', 'PRI', 'PRES',
        'ESE', 'ANTI', 'CALLY', 'ATION', 'EING' );
begin
  Lastname := n[num div 100];
  Lastname := Lastname + n[(num div 10) mod 10];
  Lastname := Lastname + n[(num mod 10)];
end;

(* Let C-Load be the value of C used to generate C_LAST when populating the database. C-Load is a value
     in the range of [0.255] includ ing 0 and 255.
   Let C-Run be the value of C used to generate C_LAST for the measurement run.
   Let C-Delta be the absolute value of the difference between C-Load and C-Run. C-Delta must be a value in
     the range of [65..119] including the values of 65 and 119 and excluding the value of 96 and 112. *)

function TForm1.NURand(A: Integer; x, y: Integer): Integer;
var
  tmp: Integer;
  tmp1, tmp2: Integer;
  C: Integer;
begin
  // NURand (A, x, y) = (((random (0, A) | random (x, y)) + C) % (y - x + 1)) + x
  tmp1 := random(A+1);
  tmp2 := random(y+1-x) + x;
  tmp := tmp1 or tmp2;
  // C is a run-time constant randomly chosen within [0 .. A] that can be varied without altering performance.
  // The same C value, per field (C_LAST, C_ID, and OL_I_ID), must be used by all emulated terminals.
  C := random(A+1);  // C_Load should be the same outside the function
  tmp := tmp + C;
  tmp := tmp mod (y-x+1);
  tmp := tmp + x;
  result := tmp;
end;

(* ==================================================================+
| ROUTINE NAME
|
Customer
| DESCRIPTION
|
Loads Customer Table
|
Also inserts corresponding history record
| ARGUMENTS
|
id - customer id
|
d_id - district id
|
w _id - warehouse id
+================================================================== *)

procedure TForm1.Customer( d_id , w_id: Integer );
var
  c_id: Integer;
  c_d_id: Integer;
  c_w_id: Integer;
  h_c_id: Integer;
  h_c_d_id: Integer;
  h_d_id: Integer;
  h_c_w_id: Integer;
  h_w_id: Integer;
  c_first: string;
  c_middle: string;
  c_last: string;
  c_street_1: string;
  c_street_2: string;
  c_city: string;
  c_state: string;
  c_zip: string;
  c_phone: string;
  c_since: string;
  c_credit: string;
  c_credit_lim: double;
  c_discount: double;
  c_balance: double;
  c_ytd_payment: double;
  c_payment_cnt: Integer;
  c_delivery_cnt: Integer;
  c_data: string;
  h_amount: double;
  h_date: string;
  h_data: string;
begin

  {For each row in the DISTRICT table:
  * 3,000 rows in the CUSTOMER table with:

  C_LAST generated according to Clause 4.3.2.3, iterating through the range of [0 .. 999] for the first
  1,000 customers, and generating a non-uniform random number using the function
  NURand (255,0,999) for each of the remaining 2,000 custom ers. The ru n -tim e constant C (see Clau se
  2.1.6) u sed for the database population must be randomly chosen independently from the test
  ru n(s).
  }

  // EXEC SQL WHENEVER SQLERROR GOTO sqlerr;
  ListBox1.Items.Add('Loading Customers for D_ID = ' + intToStr(d_id) + ' W_ID = ' + intToStr(w_id) );
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;

  c_d_id := d_id;
  c_w_id  := w_id ;
  h_c_d_id := d_id;
  h_d_id := d_id;
  h_c_w_id := w_id;
  h_w_id := w_id;

  // C_ID unique within [3,000]
  for c_id := 1 to CUST_PER_DIST do
    begin
      // Generate Customer Data
      // C_FIRST random string [8 .. 16]
      MakeAlphaString( 8, 16, c_first );

      c_middle := 'OE';

      if (c_id <= 1000) then
        Lastname(c_id -1,c_last)
       else
        Lastname(NURand(255,0,999),c_last);
      MakeAddress( c_street_1, c_street_2, c_city, c_state, c_zip );

      // C_PHONE random string of 16 numbers
      MakeNumberString( 16, 16, c_phone );

      // C_SINCE date/time given by the operating system when the CUSTOMER table was populated.
      c_since := DateTimeToStr(now);

      // C_CREDIT = "GC". For 10% of the rows, selected at random , C_CREDIT = "BC"
      if Random(10) = 0 then
        c_credit := 'BC' else c_credit := 'GC';

      c_credit_lim := 50000.00;

      // C_DISCOUNT random within [0.0000 .. 0.5000]
      c_discount := Random(5000+1) / 10000;

      c_balance := -10.0;
      c_ytd_payment := 10.0;
      c_payment_cnt := 1;
      c_delivery_cnt := 0;

      //// C_DATA rand om a-string [300 .. 500]
      MakeAlphaString(30,50,c_data);

      SQLQuery1.SQL.Text := 'INSERT INTO CUSTOMER ' +
                            '  ( C_ID, C_D_ID, C_W_ID, ' +
                            '    C_FIRST, C_MIDDLE, C_LAST, ' +
                            '    C_STREET_1, C_STREET_2, C_CITY, C_STATE, C_ZIP, ' +
                            '    C_PHONE, C_SINCE, C_CREDIT, ' +
                            '    C_CREDIT_LIM , C_DISCOUNT, C_BALANCE, ' +
                            '    C_YTD_PAYMENT, C_PAYMENT_CNT, C_DELIVERY_CNT, C_DATA ) ' +
                            '  VALUES ( ' +
                                 intToStr(c_id) + ', ' + intToStr(c_d_id) + ', ' + intToStr(c_w_id) + ', ''' +
                                 c_first + ''', ''' + c_middle + ''', ''' + c_last + ''', ''' +
                                 c_street_1 + ''', ''' + c_street_2 +  ''', ''' + c_city + ''', ''' + c_state + ''', ''' +  c_zip + ''', ''' +
                                 c_phone + ''', ''' + c_since + ''', '''+  c_credit + ''', ' +
                                 floatToStr(c_credit_lim) + ', ' +  floatToStr(c_discount) + ', ' + floatToStr(c_balance) + ', ' +
                                 floatToStr(c_ytd_payment) + ', ' +  intToStr(c_payment_cnt) + ', ' + intToStr(c_delivery_cnt) + ', ''' + c_data +
                                 '''         ); ';
      SQLQuery1.ExecSQL();


      // H_DATE current date and time
      h_date := DateTimeToStr(now);

      h_amount := 10.0;

      // H_DATA random string [12 .. 24]
      MakeAlphaString(12,24,h_data);

      h_c_id := c_id;

      SQLQuery1.SQL.Text := 'INSERT IN1ORY ' +
                            '  ( H_C_ID, H_C_D_ID, H_C_W_ID, ' +
                            '    H_D_ID, H_W_ID, H_DATE, H_AMOUNT, H_DATA ) ' +
                            ' VALUES ( ' +
                                intToStr(h_c_id ) + ', '+ intToStr(h_c_d_id) + ', ' + intToStr(h_c_w_id) + ', ' +
                                intToStr(h_d_id) + ', ' + intToStr(h_w_id) + ', ''' + h_date + ''', ' + floatToStr(h_amount) + ', ''' + h_data +
                                '''        ); ';
      SQLQuery1.ExecSQL();

      {$IFDEF option_debug}
        //writeln('C_ID = ' + intToStr(c_id) + 'C_LAST = ' + c_last + ' C_PHONE # = '+ c_phone);
      {$ENDIF}

      if (c_id mod 100 = 0) then
        begin
          Edit1.Text := Edit1.Text + '.';
          Edit1.Refresh;
          SQLTransaction1.Commit();
        end;

      if (c_id mod 1000 = 0) then
        begin
          ListBox1.Items.Add(intToStr(c_id) + ' Customers for warehouse ' + intToStr(c_w_id) + ' and district: ' + intToStr(c_d_id));
          ListBox1.ItemIndex := ListBox1.Count - 1;
          ListBox1.Refresh;
          Edit1.Text :='';
          Edit1.Refresh;
        end;

    end;


   ListBox1.Items.Add('Customers done.');
   ListBox1.ItemIndex := ListBox1.Count - 1;
   ListBox1.Refresh;
   SQLTransaction1.Commit();
{  return;
  sqlerr:
  Error();   }
end;

(* ==================================================================+
| ROUTINE NAME
|
District
| DESCRIPTION
|
Loads the District table
| ARGUMENTS
|
w_id - warehouse id
+================================================================== *)

procedure TForm1.District( w_id: Integer );
var
  d_id: Integer;
  d_w_id: Integer;
  d_name: string;
  d_street_1: string;
  d_street_2: string;
  d_city: string;
  d_state: string;
  d_zip: string;
  d_tax: double;
  d_ytd: double;
  d_next_o_id: Integer;
begin
  // EXEC SQL WHENEVER SQLERROR GOTO sqlerr;
  ListBox1.Items.Add('Loading District');
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;


  d_w_id := w_id ;

  d_ytd := 30000.0;

  d_next_o_id := 3001;

  // 10 rows in the DISTRICT table
  for d_id := 1 to DIST_PER_WARE do
    begin
      // Generate District Data
      // D_ID unique within [10]

      // D_NAME random string [6 .. 10]
      MakeAlphaString(6,10,d_name);

      MakeAddress( d_street_1, d_street_2, d_city, d_state, d_zip );

      // D_TAX random within [0.0000 .. 0.2000]
      d_tax := (Random(2000+1)) / 10000;

      SQLQuery1.SQL.Text := 'INSERT INTO DISTRICT ' +
                            '  ( D_ID, D_W_ID, D_NAME, ' +
                            '    D_STREET_1, D_STREET_2, D_CITY, D_STATE, D_ZIP, '+
                            '    D_TAX, D_YTD, D_NEXT_O_ID ) ' +
                            ' VALUES ( ' +
                                intToStr(d_id) + ', ' + intToStr(d_w_id) + ', ''' + d_name + ''', ''' +
                                d_street_1 + ''', ''' + d_street_2 + ''', ''' + d_city + ''', ''' + d_state + ''', ''' + d_zip + ''', ' +
                                floatToStr(d_tax) + ', ' + floatToStr(d_ytd) + ', ' + IntToStr(d_next_o_id) +
                                '        ); ';
      SQLQuery1.ExecSQL();


      {$IFDEF option_debug}
         writeln('D_ID = ' + intToStr(d_id) + ' D_W_ID = ' + intToStr(d_w_id) + ' D_NAME = '+ d_name + ' D_TAX = ' + floatToStr(d_tax));
      {$ENDIF}

      (* For each row in the DISTRICT table:
           3,000 rows in the CUSTOMER table *)
      Customer(d_id,d_w_id);

    end;

  SQLTransaction1.Commit();
{  return;
  sqlerr:
  Error(); }
end;

(* ==================================================================+
| ROUTINE NAME
|
LoadWare
| DESCRIPTION
|
Loads the Warehouse table
|
Loads Stock, District as Warehouses are created
| ARGUMENTS
|
none
+================================================================== *)

procedure TForm1.LoadWare();
var
  w_id: Integer;
  w_name: string;
  w_street_1: string;
  w_street_2: string;
  w_city: string;
  w_state: string;
  w_zip: string;
  w_tax: double;
  w_ytd: double ;
begin
  // EXEC SQL WHENEVER SQLERROR GOTO sqlerr;
  ListBox1.Items.Add('Loading Warehouse');
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;

  // W_ID unique within [number_of_configured_warehouses]
  for w_id := 1 to  count_ware do
    begin
      // Generate Warehouse Data
      // W_NAME random string [6 .. 10]
      MakeAlphaString( 6, 10, w_name);

      MakeAddress( w_street_1, w_street_2, w_city, w_state, w_zip );

      // W_TAX random within [0.0000 .. 0.2000]
      w_tax := (Random(2000+1)) / 10000;


      w_ytd := 3000000.00;

      {$IFDEF option_debug}
        writeln( 'WID = ' + intToStr(w_id) + ' Name= ' + w_name + ' Tax = ' + floatToStr(w_tax));
      {$ENDIF}
      SQLQuery1.SQL.Text := 'INSERT INTO WAREHOUSE ' +
                            '  ( W_ID , W_NAME,' +
                            '    W_STREET_1, W_STREET_2, W_CITY, W_STATE, W_ZIP,' +
                            '    W_TAX, W_YTD )' +
                            ' VALUES ( ' +
                                intToStr(w_id) + ', ''' + w_name + ''', ''' +
                                w_street_1 + ''', ''' + w_street_2 + ''', ''' + w_city + ''', ''' + w_state + ''', ''' +
                                w_zip + ''', ' + floatToStr(w_tax) + ', ' + floatToStr(w_ytd) +
                                '        ); ';
      SQLQuery1.ExecSQL();

      // Make Rows associated with Warehouse
      Stock(w_id );
      District(w_id );
      SQLTransaction1.Commit();
    end
{  return;
  sqlerr:
  Error(); }
end;


(* ==================================================================+
| ROUTINE NAME
|
Orders
| DESCRIPTION
|
Loads the Orders table
|
Also loads the Order_Line table on the fly
| ARGUMENTS
|
w_id - warehouse id
+================================================================== *)

procedure TForm1.Orders(d_id, w_id: Integer);
var
  o_id: Integer;
  no_o_id: integer;
  no_d_id: integer;
  no_w_id: integer;
  ol_o_id: Integer;
  ol_d_id: integer;
  ol_w_id: integer;
  o_c_id: Integer;
  o_d_id: Integer;
  o_w_id: Integer;
  o_entry_d: string;
  o_carrier_id: Integer;
  o_ol_cnt: Integer;
  o_all_local: Boolean;
  ol_number: Integer;
  ol_i_id: Integer;
  ol_supply_w_id: Integer;
  ol_delivery_d: string;
  ol_quantity: Integer;
  ol_amount: double;
  ol_dist_info: string;
  customerPermutation: array [1..CUST_PER_DIST] of Integer;
  i, j, m: integer;
  st_local: string;
begin

  // EXEC SQL WHENEVER SQLERROR GOTO sqlerr;

  ListBox1.Items.Add('Loading Orders for d_id = ' + intToStr(d_id) + ' w_id = ' +IntToStr(w_id));
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;

  o_d_id := d_id ;
  o_w_id := w_id ;
  o_all_local := true;
  if o_all_local then st_local := 'TRUE' else st_local := 'FALSE';

  // InitPermutation(); // Customers id are given a random order into an array permutation
  for i := 1 to CUST_PER_DIST do
    customerPermutation[i] := i;
  i := 1;
  repeat
    j := customerPermutation[i];
    m := random(CUST_PER_DIST)+1;
    customerPermutation[i] := customerPermutation[m];
    customerPermutation[m] := j;
    i := i + 1;
  until i >=  CUST_PER_DIST;
  // initialize permutation of customer numbers

  // 3,000 rows in the ORDER table
  // O_ID unique within [3,000]

  for o_id := 1 to ORD_PER_DIST do
    begin
      // Generate Order Data
      if o_id < CUST_PER_DIST then m := o_id else m := random(CUST_PER_DIST) + 1;

      // O_C_ID selected sequentially from a random permutation of [1 .. 3,000]
      o_c_id := customerPermutation[m]; // GetPermutation();
      // O_ENTRY_D current date/time given by the operating system
      o_entry_d := DateTimeToStr(date); // TimeStamp

      o_carrier_id := Random(10) + 1;

      // O_OL_CNT random within [5 .. 15]
      o_ol_cnt := Random(11) + 5;

      if (o_id > (ORD_PER_DIST-900)) then
        // the last 900 orders have not been delivered
        begin
          SQLQuery1.SQL.Text := 'INSERT INTO ORDERS ' +
                                '  ( O_ID, O_C_ID, O_D_ID, O_W_ID, ' +
                                '    O_ENTRY_D , O_CARRIER_ID , O_OL_CNT, O_ALL_LOCAL ) ' +
                                ' VALUES ( ' +
                                  intToStr(o_id) + ', ' + intToStr(o_c_id) + ', ' + intToStr(o_d_id) + ', ' + intToStr(o_w_id) + ', ''' +
                                  o_entry_d + ''', ' + ' NULL,' + intToStr(o_ol_cnt) + ', '+ st_local +
                                  '        ); ';
          SQLQuery1.ExecSQL();

          no_o_id := o_id;
          no_d_id := d_id;
          no_w_id := w_id;

           SQLQuery1.SQL.Text := 'INSERT INTO NEW_ORDER' +
                                 '  ( NO_O_ID , NO_D_ID , NO_W_ID ) ' +
                                 ' VALUES ( ' +
                                   intToStr(no_o_id) + ', ' + intToStr(no_d_id) + ', ' + intToStr(no_w_id) +
                                   '        ); ';
           SQLQuery1.ExecSQL();

        end
       else
        begin
          SQLQuery1.SQL.Text := 'INSERT INTO ORDERS ' +
                                '  ( O_ID, O_C_ID, O_D_ID, O_W_ID, ' +
                                '    O_ENTRY_D , O_CARRIER_ID , O_OL_CNT, O_ALL_LOCAL ) ' +
                                ' VALUES ( ' +
                                    intToStr(o_id) + ', ' + intToStr(o_c_id) + ', ' + intToStr(o_d_id) + ', ' + intToStr(o_w_id) + ', ''' +
                                    o_entry_d + ''', ' + intToStr(o_carrier_id) + ', ' + intToStr(o_ol_cnt) + ', ' + st_local +
                                    '        ); ';
          SQLQuery1.ExecSQL();

        end;
      {$IFDEF option_debug}
         // writeln('O_ID = ' + intToStr(o_id) + ' O_C_ID = ' + intToStr(o_c_id) + ' O_D_ID = ' + intToStr(o_d_id) + ' O_W_ID = ' + intToStr(o_w_id));
      {$ENDIF}

      ol_d_id := d_id;
      ol_w_id := w_id;

      // OL_NUMBER unique within [O_OL_CNT]
      for ol_number := 1 to o_ol_cnt do
        begin
          // Generate Order Line Data
          ol_o_id := o_id;

          // ol_i_id random within [1 .. 100,000]
          ol_i_id := Random(MAXITEMS) + 1;

          ol_supply_w_id := o_w_id ;
          ol_quantity := 5;

          // OL_DIST_INFO random string of 24 letters
          MakeAlphaString(24,24,ol_dist_info);

          // OL_DELIVERY_D = O_ENTRY_D if OL_O_ID < 2,101, null otherwise
          // OL_AMOUNT = 0.00 if OL_O_ID < 2,101, random within [0.01 .. 9,999.99] otherwise
          if (o_id > (ORD_PER_DIST-900)) then
            begin
              ol_amount := 0.0;
              // ol_delivery_d := 'NULL';

              SQLQuery1.SQL.Text := 'INSERT INTO ORDER_LINE ' +
                                    '  ( OL_O_ID , OL_D_ID , OL_W_ID, OL_NUMBER, ' +
                                    '    OL_I_ID, OL_SUPPLY_W_ID , OL_DELIVERY_D, OL_QUANTITY, ' +
                                    '    OL_AMOUNT, OL_DIST_INFO ) ' +
                                    ' VALUES ( ' +
                                        intToStr(ol_o_id) + ', ' + intToStr(ol_d_id) + ', ' + intToStr(ol_w_id) + ', ' + intToStr(ol_number) + ', ' +
                                        intToStr(ol_i_id) + ', ' + intToStr(ol_supply_w_id) + ', NULL, ' + intToStr(ol_quantity) + ', ' +
                                        floatToStr(ol_amount) + ', ''' + ol_dist_info +
                                        '''        ); ';
              SQLQuery1.ExecSQL();

            end
           else
            begin
              ol_amount := (Random(1000000 - 1 + 1) + 1)/ 100.0;
              ol_delivery_d := o_entry_d;

              SQLQuery1.SQL.Text := 'INSERT INTO ORDER_LINE ' +
                                    '  ( OL_O_ID , OL_D_ID , OL_W_ID, OL_NUMBER, ' +
                                    '    OL_I_ID, OL_SUPPLY_W_ID , OL_DELIVERY_D, OL_QUANTITY, ' +
                                    '    OL_AMOUNT, OL_DIST_INFO ) ' +
                         ' values ( ' +
                              intToStr(ol_o_id) + ', ' + intToStr(ol_d_id) + ', ' + intToStr(ol_w_id) + ', ' + intToStr(ol_number) + ', ' +
                              intToStr(ol_i_id) + ', ' + intToStr(ol_supply_w_id) + ', ''' + ol_delivery_d + ''', ' + intToStr(ol_quantity) + ', ' +
                              floatToStr(ol_amount) + ', ''' + ol_dist_info +
                         '''        ); ';
              SQLQuery1.ExecSQL();

            end;

          {$IFDEF option_debug}
             // writeln('OL_NUMBER = ' + intToStr(ol_number) + ' OL_I_ID = ' + intToStr(ol_i_id) + ' OL_QUANTITY = ' + intToStr(ol_quantity) + ' OL_AMOUNT = ' + floatToStr(ol_amount));
          {$ENDIF}
        end;

      if (o_id mod 100 = 0) then
        begin
          Edit1.Text := Edit1.Text + '.';
          Edit1.Refresh;
          SQLTransaction1.Commit();
        end;

      if (o_id mod 1000 = 0) then
        begin
          ListBox1.Items.Add(intToStr(o_id) + ' Orders');
          ListBox1.ItemIndex := ListBox1.Count - 1;
          ListBox1.Refresh;
          Edit1.Text :='';
          Edit1.Refresh;
        end;

    end;

  SQLTransaction1.Commit();

  {  return;
    sqlerr:
    Error(); }
end;

(* ==================================================================+
| ROUTINE NAME
|
Load Ord
| DESCRIPTION
|
Loads the Orders and Order_Line Tables
| ARGUMENTS
|
none
+================================================================== *)

procedure TForm1.LoadOrd();
var
  w_id: Integer;
  w_tax: double;
  d_id: Integer;
  d_tax: double;
begin
  // EXEC SQL WHENEVER SQLERROR GOTO sqlerr;
  for w_id := 1 to count_ware do
    for d_id := 1 to DIST_PER_WARE do
      Orders(d_id , w_id );
  SQLTransaction1.Commit();
{  return;
  sqlerr:
  Error(); }
end;

procedure TForm1.Button1Click(Sender: TObject);
var
  StartTime: TDate;
  Diff: TTime;
  Hour, Min, Sec, MSec: word;
  st: string;
begin
  DBConnection.Connected := True;
  SQLTransaction1.Active := True;
  StartTime := now;
  loadItems;
  LoadWare();
  // For each row in the DISTRICT table:
  //   3,000 rows in the ORDER table
  LoadOrd ();
  ListBox1.Items.Add('');
  ListBox1.Items.Add('DATA LOADING COMPLETED SUCCESSFULLY.');
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;
  SQLTransaction1.Commit();

  Diff := Now - StartTime;
  DecodeTime(Diff, Hour, Min, Sec, MSec);
  st := 'Elapsed Time = ';
  if Hour <> 0 then
    st := st + IntToStr(Hour) + ' Hours ';
  if Min <> 0 then
    st := st + IntToStr(Min) + ' Minutes ';
  if sec <> 0 then
    st := st + IntToStr(Sec) + ' Seconds ';
  st := st + IntToStr(Msec) + ' MilliSeconds';
  Edit1.Text := st;

  exit;


  SQLQuery1.SQL.Text := 'SELECT * FROM ITEM ' ;

  DBConnection.Connected := True;
  SQLTransaction1.Active := True;
  SQLQuery1.Open;

(*
CREATE TABLE WAREHOUSE (
W_ID INT UNIQUE NOT NULL,		/* 2*W unique IDs		W Warehouses are populated */
W_NAME VARCHAR (10) NOT NULL,		/* variable text, size 10 */
W_STREET_1 VARCHAR (20) NOT NULL,	/* variable text, size 20 */
W_STREET_2 VARCHAR (20),		/* variable text, size 20 */
W_CITY VARCHAR (20) NOT NULL,		/* variable text, size 20 */
W_STATE CHAR (2) NOT NULL,		/* fixed text, size 2 */
W_ZIP CHAR (9) NOT NULL,		/* fixed text, size 9 */
W_TAX NUMERIC (4, 4) NOT NULL,		/* signed numeric(4,4) 		Sales tax */
W_YTD NUMERIC (12, 2) NOT NULL,		/* signed numeric(12,2)		Year to date balance */
PRIMARY KEY (W_ID)
);

CREATE TABLE DISTRICT	(
D_ID INT NOT NULL,		        /* 20 unique IDs 		10 are populated per warehouse */
D_W_ID INT NOT NULL,			/* 2*W unique IDs */
D_NAME VARCHAR (10) NOT NULL,		/* variable text, size 10 */
D_STREET_1 VARCHAR (20) NOT NULL,	/* variable text, size 20 */
D_STREET_2 VARCHAR (20),        	/* variable text, size 20 */
D_CITY VARCHAR (20) NOT NULL,		/* variable text, size 20 */
D_STATE CHAR (2) NOT NULL,		/* fixed text, size 2 */
D_ZIP CHAR (9) NOT NULL,		/* fixed text, size 9 */
D_TAX NUMERIC (4, 4) NOT NULL,		/* signed numeric(4,4) 		Sales tax */
D_YTD NUMERIC (12, 2) NOT NULL,		/* signed numeric(12,2)		Year to date balance */
D_NEXT_O_ID INT NOT NULL, 		/* 10,000,000 unique IDs 	Next available Order number */
PRIMARY KEY (D_W_ID, D_ID),
FOREIGN KEY (D_W_ID) REFERENCES WAREHOUSE(W_ID)
);

CREATE TABLE CUSTOMER	(
C_ID INT NOT NULL,		        /* 96,000 unique IDs 		3,000 are populated per district */
C_D_ID INT NOT NULL,			/* 20 unique IDs */
C_W_ID INT NOT NULL, 			/* 2*W unique IDs */
C_FIRST VARCHAR (16) NOT NULL,		/* variable text, size 16 */
C_MIDDLE CHAR (2) NOT NULL,		/* fixed text, size 2 */
C_LAST VARCHAR (16) NOT NULL,		/* variable text, size 16 */
C_STREET_1 VARCHAR (20) NOT NULL,	/* variable text, size 20 */
C_STREET_2 VARCHAR (20),        	/* variable text, size 20 */
C_CITY VARCHAR (20) NOT NULL,		/* variable text, size 20 */
C_STATE CHAR (2) NOT NULL,		/* fixed text, size 2 */
C_ZIP CHAR (9) NOT NULL,		/* fixed text, size 9 */
C_PHONE CHAR (16) NOT NULL,		/* fixed text, size 16 */
C_SINCE DATE NOT NULL,			/* date and time */
C_CREDIT CHAR (2) NOT NULL,		/* fixed text, size 2 		"GC"=good, "BC"=bad */
C_CREDIT_LIM NUMERIC (12, 2) NOT NULL,	/* signed numeric(12, 2) */
C_DISCOUNT NUMERIC (4,4) NOT NULL,	/* signed numeric(4, 4) */
C_BALANCE NUMERIC (12, 2) NOT NULL,	/* signed numeric(12, 2) */
C_YTD_PAYMENT NUMERIC (12, 2) NOT NULL,	/* signed numeric(12, 2) */
C_PAYMENT_CNT NUMERIC (4) NOT NULL,	/* numeric(4) */
C_DELIVERY_CNT NUMERIC (4) NOT NULL,	/* numeric(4) */
C_DATA text, /* BLOB,*/    	/* variable text, size 500 	Miscellaneous information */
PRIMARY KEY (C_W_ID, C_D_ID, C_ID),
FOREIGN KEY (C_W_ID, C_D_ID) REFERENCES DISTRICT(D_W_ID, D_ID)
);

CREATE TABLE HISTORY	(
H_C_ID INT NOT NULL,		        /* 96,000 unique IDs */
H_C_D_ID INT NOT NULL,			/* 20 unique IDs */
H_C_W_ID INT NOT NULL,			/* 2*W unique IDs */
H_D_ID INT NOT NULL,			/* 20 unique IDs */
H_W_ID INT NOT NULL,			/* 2*W unique IDs */
H_DATE DATE NOT NULL,			/* date and time */
H_AMOUNT NUMERIC (6, 2) NOT NULL,	/* signed numeric(6, 2) */
H_DATA text, /* BLOB, */		/* variable text, size 24 	Miscellaneous information */
FOREIGN KEY (H_C_W_ID, H_C_D_ID, H_C_ID) REFERENCES CUSTOMER(C_W_ID, C_D_ID, C_ID),
FOREIGN KEY (H_W_ID, H_D_ID) REFERENCES DISTRICT(D_W_ID, D_ID)
);

CREATE TABLE ORDERS	(
O_ID INT NOT NULL, 		        /* 10,000,000 unique IDs */
O_D_ID INT NOT NULL, 			/* 20 unique IDs */
O_W_ID INT NOT NULL,			/* 2*W unique IDs */
O_C_ID INT NOT NULL,			/* 96,000 unique IDs */
O_ENTRY_D DATE NOT NULL,		/* date and time */
O_CARRIER_ID INT,                	/* 10 unique IDs, or null */
O_OL_CNT NUMERIC (2) NOT NULL,		/* numeric(2) 			Count of Order-Lines */
O_ALL_LOCAL BOOLEAN NOT NULL,	/* numeric(1) */
PRIMARY KEY (O_W_ID, O_D_ID, O_ID),
FOREIGN KEY (O_W_ID, O_D_ID, O_C_ID) REFERENCES CUSTOMER(C_W_ID, C_D_ID, C_ID)
);

CREATE TABLE NEW_ORDER	(
NO_O_ID INT NOT NULL, 		        /* 10,000,000 unique IDs */
NO_D_ID INT NOT NULL, 			/* 20 unique IDs */
NO_W_ID INT NOT NULL, 			/* 2*W unique IDs */
PRIMARY KEY (NO_W_ID, NO_D_ID, NO_O_ID),
FOREIGN KEY (NO_W_ID, NO_D_ID, NO_O_ID) REFERENCES ORDERS(O_W_ID, O_D_ID, O_ID)
);

CREATE TABLE ITEM	(
I_ID INT UNIQUE NOT NULL,		/* 200,000 unique IDs 		100,000 items are populated */
I_IM_ID INT,     			/* 200,000 unique IDs 		Image ID associated to Item */
I_NAME VARCHAR (24) NOT NULL,		/* variable text, size 24 */
I_PRICE NUMERIC (5, 2) NOT NULL,	/* numeric(5, 2) */
I_DATA text, /* BLOB, */		/* variable text, size 50 	Brand information */
PRIMARY KEY (I_ID)
);

CREATE TABLE STOCK	(
S_I_ID INT NOT NULL,			/* 200,000 unique IDs 		100,000 populated per warehouse */
S_W_ID INT NOT NULL,			/* 2*W unique IDs */
S_QUANTITY NUMERIC (4),			/* signed numeric(4) */
S_DIST_01 CHAR (24),			/* fixed text, size 24 */
S_DIST_02 CHAR (24),			/* fixed text, size 24 */
S_DIST_03 CHAR (24),			/* fixed text, size 24 */
S_DIST_04 CHAR (24),			/* fixed text, size 24 */
S_DIST_05 CHAR (24) ,			/* fixed text, size 24 */
S_DIST_06 CHAR (24),			/* fixed text, size 24 */
S_DIST_07 CHAR (24),			/* fixed text, size 24 */
S_DIST_08 CHAR (24),			/* fixed text, size 24 */
S_DIST_09 CHAR (24),			/* fixed text, size 24 */
S_DIST_10 CHAR (24),			/* fixed text, size 24 */
S_YTD NUMERIC (8) NOT NULL,		/* numeric(8) */
S_ORDER_CNT NUMERIC (4) NOT NULL,	/* numeric(4) */
S_REMOTE_CNT NUMERIC (4) NOT NULL,	/* numeric(4) */
S_DATA text, /* BLOB, */		/* variable text, size 50 	Make information */
PRIMARY KEY (S_W_ID, S_I_ID),
FOREIGN KEY (S_W_ID)  REFERENCES WAREHOUSE(W_ID),
FOREIGN KEY (S_I_ID)  REFERENCES ITEM(I_ID)
);

CREATE TABLE ORDER_LINE	(
OL_O_ID INT NOT NULL,			/* 10,000,000 unique IDs */
OL_D_ID INT NOT NULL,			/* 20 unique IDs */
OL_W_ID INT NOT NULL,			/* 2*W unique IDs */
OL_NUMBER INT NOT NULL,			/* 15 unique IDs */
OL_I_ID INT NOT NULL,			/* 200,000 unique IDs */
OL_SUPPLY_W_ID INT NOT NULL,		/* 2*W unique IDs */
OL_DELIVERY_D DATE NULL,		/* date and time, or null */
OL_QUANTITY NUMERIC (2) NOT NULL,	/* numeric(2) */
OL_AMOUNT NUMERIC (6, 2) NOT NULL,	/* signed numeric(6, 2) */
OL_DIST_INFO CHAR (24) NOT NULL,	/* fixed text, size 24 */
PRIMARY KEY (OL_W_ID, OL_D_ID, OL_O_ID, OL_NUMBER),
FOREIGN KEY (OL_W_ID, OL_D_ID, OL_O_ID) REFERENCES ORDERS(O_W_ID, O_D_ID, O_ID),
FOREIGN KEY (OL_SUPPLY_W_ID, OL_I_ID) REFERENCES STOCK(S_W_ID, S_I_ID)
);



DROP TABLE NEW_ORDER;
DROP TABLE ORDER_LINE;
DROP TABLE ORDERS;
DROP TABLE HISTORY;
DROP TABLE CUSTOMER;
DROP TABLE STOCK;
DROP TABLE DISTRICT;
DROP TABLE WAREHOUSE;
DROP TABLE ITEM;

*)

end;

procedure TForm1.Button2Click(Sender: TObject);
var
  StartTime: TDate;
  Diff: TTime;
  Hour, Min, Sec, MSec: word;
  st: string;
  c_id: Integer;
  w_id: Integer;
  d_id: Integer;
  h_amount: double;
  c_w_id: Integer;
  c_d_id: Integer;
  byName: boolean;
  c_last: string;
  TN: Integer;
  New_Order_TransactionCounter: Integer;
  Payment_TransactionCounter: Integer;
  Order_Status_TransactionCounter: Integer;
  Delivery_TransactionCounter: Integer;
  Stock_Level_TransactionCounter: Integer;
  i: Integer;
  stQuery: string;
  TablesFound: Integer;
  TotalTransactions: Integer;
begin
  DBConnection.Connected := True;
  SQLTransaction1.Active := True;


  randomize;
  startTime := now;
  New_Order_TransactionCounter := 0;
  Payment_TransactionCounter := 0;
  Order_Status_TransactionCounter := 0;
  Delivery_TransactionCounter := 0;
  Stock_Level_TransactionCounter := 0;
  c_id := 1;
  w_id := 1;
  d_id := 1;
  h_amount := 10;
  byName := false;
  c_w_id := 2;
  c_d_id := 2;
  c_last := '';
  repeat
    TN := random(6) + 1;
    case TN of
      1:
        begin
          New_Order_TransactionCounter := New_Order_TransactionCounter + 1;
          new_order(c_id,w_id,d_id)
        end;
      2:
        begin
          Payment_TransactionCounter := Payment_TransactionCounter + 1;
          payment(w_id,d_id,h_amount,byName,c_w_id,c_d_id,c_id,c_Last);
        end;
      3:
        begin
          Order_Status_TransactionCounter := Order_Status_TransactionCounter + 1;
          order_status(byName,c_id,c_last,d_id,w_id)
        end;
      4:
        begin
          Delivery_TransactionCounter := Delivery_TransactionCounter + 1;
          delivery(w_id)
        end;
      5:
        begin
          Stock_Level_TransactionCounter := Stock_Level_TransactionCounter + 1;
          stock_level(w_id,d_id)
        end;
    end;
    Diff := Now - StartTime;
    DecodeTime(Diff, Hour, Min, Sec, MSec);
  until Min <> 0;

  listBox1.Items.Add('Transaction NEW-ORDER TRANSACTION has been called: ' + intToStr(New_Order_TransactionCounter));
  listBox1.Items.Add('Transaction PAYMENT TRANSACTION has been called: ' + intToStr(Payment_TransactionCounter));
  writeln('Transaction ORDER-STATUS TRANSACTION has been called: ' + intToStr(Order_Status_TransactionCounter));
  listBox1.Items.Add('Transaction DELIVERY TRANSACTION has been called: ' + intToStr(Delivery_TransactionCounter));
  listBox1.Items.Add('Transaction STOCK-LEVEL TRANSACTION has been called: ' + intToStr(Stock_level_TransactionCounter));
  TotalTransactions := New_Order_TransactionCounter + Payment_TransactionCounter +
                       Order_Status_TransactionCounter + Delivery_TransactionCounter +
                       Stock_level_TransactionCounter;
  listBox1.Items.Add('Number of Transactions in 1 min. = ' + intToStr(TotalTransactions));






  //new_order(1,1,1);
  //payment( 1,1,10.0,false,1,1,1,'BARBAROUGHT');
  //stock_level(1,1);
  //delivery(1);
  order_status(false,1,'',1,1);
end;


(* For any given terminal, the home warehouse number (W_ID) is constant over
     the whole measurement interval.
   The district number (D_ID) is randomly selected within [1 .. 10] from the
     home warehouse (D_W_ID = W_ID). The non-uniform random customer number
     (C_ID) is selected using the NURand (1023,1,3000) function from the
     selected district number (C_D_ID = D_ID) and the home warehouse number
     (C_W_ID = W_ID). *)

function TForm1.new_order(c_id: Integer; w_id: Integer; d_id: Integer): Integer; // The New-Order Transaction
var
  d_next_o_id: Integer; // DB return variable
  c_d_id: Integer;
  d_w_id: Integer;
  o_id: Integer;
  o_entry_d: string;
  o_ol_cnt: Integer; // randomly selected within [5 .. 15] (an average of 10)
  o_all_local: Boolean;
  st_local: string;
  ol_number: Integer;
  supware: array [1..15] of Integer;
  ol_supply_w_id: Integer;
  ol_i_id: integer;
  ol_quantity: Integer;
  ol_dist_info: string;
  s_quantity: Integer;
  ol_amount: double;
  i_price: double;
  w_tax, d_tax: double;
  c_discount: double;
  c_last: string;
  c_credit: string;
  total: double;
  rbk: Integer;
  o_c_id: Integer;
  o_d_id: Integer;
  o_w_id: Integer;
  no_o_id: Integer;
  no_d_id: Integer;
  no_w_id: Integer;
  i_name: string;
  i_data: string;
  s_data: string;
  s_dist_01: string;
  s_dist_02: string;
  s_dist_03: string;
  s_dist_04: string;
  s_dist_05: string;
  s_dist_06: string;
  s_dist_07: string;
  s_dist_08: string;
  s_dist_09: string;
  s_dist_10: string;
  ol_w_id: integer;
  resParams: array of string;
  next_o_id: integer;
begin
  exit;
  result := 1;
  ListBox1.Items.Add('START NEW ORDER Transaction for Warehouse: ' + intToStr(w_id));
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;

  // EXEC SQL WHENEVER NOT FOUND GOTO sqlerr;
  // EXEC SQL WHENEVER SQLERROR GOTO sqlerr;

  (* EXEC SQL SELECT c_discount, c_last, c_credit, w_tax
     INTO :c_discount, :c_last, :c_credit, :w_tax
     FROM customer, warehouse
     WHERE w_id = :w_id AND c_w_id = w_id AND
           c_d_id = :d _id AND c_id = :c_id;

     EXEC SQL SELECT d_next_o_id , d_tax
     INTO :d _next_o_id , :d_tax
     FROM district
     WHERE d_id = :d_id AN D d_w_id = :w_id; *)

  c_d_id := d_id;
  d_w_id := w_id;
  SQLQuery1.SQL.Text := 'SELECT C_DISCOUNT, C_LAST, C_CREDIT, W_TAX, D_NEXT_O_ID, D_TAX ' +
                        '  FROM CUSTOMER, WAREHOUSE, DISTRICT' +
                        '  WHERE W_ID = ' + intToStr(w_id) + ' AND C_W_ID = W_ID ' +
                        '    AND C_d_ID = ' + intToStr(c_d_id) + ' AND C_ID = ' + intToStr(c_id) +
                        '    AND D_ID = ' + intToStr(d_id) + ' AND D_W_ID = ' + intToStr(d_w_id) +
                        '        ; ';
  //' INTO  c_discount, c_last, c_credit, w_tax' +
  SQLQuery1.Open;

  //SQLQuery1.ExecSQL();

  c_discount := SQLQuery1.Fields[0].AsFloat;
  c_Last := SQLQuery1.Fields[1].AsString;
  c_credit := SQLQuery1.Fields[2].AsString;
  w_tax := SQLQuery1.Fields[3].AsFloat;
  d_next_o_id := SQLQuery1.Fields[4].AsInteger;
  d_tax := SQLQuery1.Fields[5].AsFloat;

  SQLQuery1.Close;

  next_O_id := d_next_o_id + 1;
  SQLQuery1.SQL.Text := 'UPDATE DISTRICT SET D_NEXT_O_ID  = ' + intToStr(next_o_id) +
                        '  WHERE D_ID = ' + intToStr(d_id) + ' AND d_w_id = ' + intToStr(w_id) +
                        '        ; ';
  SQLQuery1.ExecSQL();

  o_id := d_next_o_id + 1;

  (* The order entry date (O_ENTRY_D) is generated within the SUT by using the
     current system date and time. *)
  o_entry_d := dateTimeToStr(now);

  o_ol_cnt := Random(11) + 5;

  o_all_local := true;

  for  ol_number := 1 to o_ol_cnt do
    begin
      supware[ol_number] := w_id;
      if count_ware > 1 then
        if random(100) = 0 then
          begin
            repeat
              supware[ol_number] := random(count_ware) + 1
            until supware[ol_number] <> w_id;
            o_all_local := false;
          end
    end;
  if o_all_local then st_local := 'TRUE' else st_local := 'FALSE';

  o_c_id := c_id;
  o_d_id := d_id;
  o_w_id := w_id;
  // O_CARRIER_ID := Null;


  SQLQuery1.SQL.Text := 'INSERT INTO ORDERS ' +
                        '  ( O_ID, O_C_ID, O_D_ID, O_W_ID, ' +
                        '    O_ENTRY_D , O_OL_CNT, O_ALL_LOCAL ) ' +
                        ' VALUES ( ' +
                             intToStr(o_id) + ', ' + intToStr(o_c_id) + ', ' + intToStr(O_d_id) + ', ' + intToStr(o_w_id) + ', ''' +
                             o_entry_d + ''', ' + intToStr(o_ol_cnt) + ', '+ st_local +
                        '        ); ';
  SQLQuery1.ExecSQL();

  no_o_id := o_id;
  no_d_id := d_id;
  no_w_id := w_id;
  SQLQuery1.SQL.Text := 'INSERT INTO NEW_ORDER' +
                        '  ( NO_O_ID , NO_D_ID , NO_W_ID ) ' +
                        ' VALUES ( ' +
                            intToStr(no_o_id) + ', ' + intToStr(no_d_id) + ', ' + intToStr(no_w_id) +
                        '        ); ';
  SQLQuery1.ExecSQL();

  total := 0;
  for  ol_number := 1 to o_ol_cnt do
    begin

      (*  A fixed 1% of the New-Order transactions are chosen at random to
            simulate user data entry errors and exercise the performance of
            rolling back update transactions. This must be implemented by
            generating a random number rbk within [1 .. 100]. *)

      if ol_number = o_ol_cnt then
        begin
          rbk :=random(100);
          if rbk = 0 then
            begin
              ol_i_id := null; // Not Found
              // Rollback Transaction
              result := 0;
              Exit;
            end;
        end;

      ol_supply_w_id := supware[ol_number];
      // if (ol_supply_w_id <> w_id) then o_all_local := 0;

      ol_i_id := NURand(8191,1,100000);

      // ol_i_id := atol(itemid [ol_number-1]);

      (* A quantity (OL_QUANTITY) is randomly selected within [1 .. 10] *)
      ol_quantity := random(10)+ 1;
{
      // EXEC SQL WHENEVER NOT FOUND GOTO invalid item;
      // rbk instead do the rollback transaction, set ol_i_id to Null

      stQuery := 'SELECT i_price, i_name , i_data ' +
                 '  FROM item ' +
                 '  WHERE i_id = ' + intToStr(ol_i_id) +
                 '        ; ';
      executeQuery(stQuery);
      i_price := StrToFloat(Params[0]);
      i_name := Params[1];
      i_data := Params[2];

      //EXEC SQL WHENEVER NOT FOUND GOTO sqlerr;

      stQuery := 'SELECT s_quantity, s_data, ' +
                 '       s_dist_01, s_dist_02, s_dist_03, s_dist_04, s_dist_05 ' +
                 '       s_dist_06, s_dist_07, s_dist_08, s_dist_09, s_dist_10 ' +
                 '  FROM stock '+
                 '  WHERE s_i_id = ' + intToStr(ol_i_id) +
                 '    AND s_w_id = ' + intToStr(ol_supply_w_id) +
                 '        ; ';
      executeQuery(stQuery);
      s_quantity := StrToInt(Params[0]);
      s_data := Params[1];
      s_dist_01 := Params[2];
      s_dist_02 := Params[3];
      s_dist_03 := Params[4];
      s_dist_04 := Params[5];
      s_dist_05 := Params[6];
      s_dist_06 := Params[7];
      s_dist_07 := Params[8];
      s_dist_08 := Params[9];
      s_dist_09 := Params[10];
      s_dist_10 := Params[11];
 }
      SQLQuery1.SQL.Text := 'SELECT i_price, i_name , i_data ' +
                            '       s_quantity, s_data, ' +
                            '       s_dist_01, s_dist_02, s_dist_03, s_dist_04, s_dist_05 ' +
                            '       s_dist_06, s_dist_07, s_dist_08, s_dist_09, s_dist_10 ' +
                            '  FROM item, stock, warehouse ' +
                            '  WHERE i_id = ' + intToStr(ol_i_id) +
                            '    AND s_w_id = ' + intToStr(ol_supply_w_id) +
                            '    AND s_i_id = i_id ' +
                            '        ; ';
      SQLQuery1.Open;

      i_price := SQLQuery1.Fields[0].AsFloat;
      i_name := SQLQuery1.Fields[1].AsString;
      i_data := SQLQuery1.Fields[2].AsString;
      s_quantity := SQLQuery1.Fields[3].AsInteger;
      //s_data := SQLQuery1.Fields[4].AsString;
      s_dist_01 := SQLQuery1.Fields[5].AsString;
      s_dist_02 := SQLQuery1.Fields[6].AsString;
      s_dist_03 := SQLQuery1.Fields[7].AsString;
      s_dist_04 := SQLQuery1.Fields[8].AsString;
      s_dist_05 := SQLQuery1.Fields[9].AsString;
      s_dist_06 := SQLQuery1.Fields[10].AsString;
      s_dist_07 := SQLQuery1.Fields[11].AsString;
      s_dist_08 := SQLQuery1.Fields[12].AsString;
      s_dist_09 := SQLQuery1.Fields[13].AsString;
      s_dist_10 := SQLQuery1.Fields[14].AsString;

      SQLQuery1.Close;

      ol_w_id := ol_supply_w_id;
      // pick_dist_info(ol_dist_info, ol_w_id );
      ol_dist_info := resParams[ol_w_id+4]; // pick correct s_dist_xx

      (*
      stock[ol_number-1] = s_quantity;
      if (pos('original',i_data) <> 0) and (pos('original',i_data) <> 0) then
        bg[ol_number-1] := 'B'  // Brand
       else
        bg[ol_number-1] := 'G'; // Generic
      *)

      if (s_quantity > ol_quantity) then
        s_quantity := s_quantity - ol_quantity
       else
        s_quantity := s_quantity - ol_quantity + 91;

      SQLQuery1.SQL.Text := 'UPDATE stock SET s_quantity = '  + intToStr(s_quantity) +
                            '  WHERE s_i_id = '  + intToStr(ol_i_id) +
                            '    AND s_w_id = ' + intToStr(ol_supply_w_id) +
                            '        ); ';
      SQLQuery1.ExecSQL();

      w_tax := 0.12;
      d_tax := 0.12;
      ol_amount := ol_quantity * i_price * (1 + w_tax + d_tax) * (1 - c_discount);
      // amt[ol_number-1] = ol_amount;
      total := total + ol_amount;


      SQLQuery1.SQL.Text := 'INSERT INTO ORDER_LINE ' +
                            '  ( OL_O_ID , OL_D_ID , OL_W_ID, OL_NUMBER, ' +
                            '    OL_I_ID, OL_SUPPLY_W_ID , OL_DELIVERY_D, OL_QUANTITY, ' +
                            '    OL_AMOUNT, OL_DIST_INFO ) ' +
                            ' values ( ' +
                                intToStr(o_id) + ', ' + intToStr(d_id) + ', ' + intToStr(w_id) + ', ' + intToStr(ol_number) + ', ' +
                                intToStr(ol_i_id) + ', ' + intToStr(ol_supply_w_id) + ', NULL' + intToStr(ol_quantity) + ', ' +
                                floatToStr(ol_amount) + ', ' + ol_dist_info +
                            '        ); ';
      SQLQuery1.ExecSQL();

    end;
    // End Order Lines

  SQLTransaction1.Commit();

  ListBox1.Items.Add('COMMIT NEW ORDER Transaction for Warehouse: ' + intToStr(w_id));
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;

  { invalid item :
    EXEC SQL ROLLBACK WORK;
    printf("Item number is not valid ");
  sqlerr:
    Error(); }
end;

function TForm1.payment( w_id: Integer; d_id: Integer;
                         h_amount: double; ByName: boolean;
                         c_w_id: Integer; c_d_id: Integer;
                         c_id: Integer; c_Last: string): Integer; // The Payment Transaction

// For any given terminal, the home warehouse number (W_ID) is constant over
//   the whole measurement interval.

// The district number (D_ID) is random ly selected within [1 ..10] from the
//   home warehouse (D_W_ID = W_ID).

// 85% of the cases, a customer is selected from the selected district number
//   (C_D_ID = D_ID) and the home warehouse number (C_W_ID = W_ID).
// If x > 85 a customer is selected from a random district number
//   (C_D_ID is randomly selected within [1 .. 10]), and a random
//    remote warehouse number C_W_ID is randomly selected within the
//    range of active warehouses, and C_W_ID ≠ W_ID)

// The customer is randomly selected 60% of the time by last name
//   (C_W_ID , C_D_ID, C_LAST) C_LAST = LASTNAME(NURand (255,0,999))and
//   40% of the time by number (C_W_ID , C_D_ID , C_ID)
//   C_ID = NURand (1023,1,3000).

var
  w_street_1: string;
  w_street_2: string;
  w_city: string;
  w_state: string;
  w_zip: string;
  w_name: string;
  d_street_1: string;
  d_street_2: string;
  d_city: string;
  d_state: string;
  d_zip: string;
  d_name: string;
  namecnt: Integer;
  n: Integer;
  c_balance: double;
  c_credit: string;
  c_new_data: string;
  h_date: string;
  h_data: string; /////////
  c_data: string;
  stDate: string;
  c_first: string;
  c_middle: string;
  c_street1: string;
  c_street2: string;
  c_city: string;
  c_state: string;
  c_zip: string;
  c_phone: string;
  c_credit_lim: double;
  c_discount: double;
  c_since: string;
begin
  // EXEC SQL WHENEVER NOT FOUND GOTO sqlerr;
  // EXEC SQL WHENEVER SQLERROR GOTO sqlerr;

  result := 1;
  ListBox1.Items.Add('START PAYMENT Transaction for Warehouse: ' + intToStr(w_id));
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;

  stDate := DateTimeToStr(now);

  SQLQuery1.SQL.Text := 'UPDATE WAREHOUSE SET W_YTD = W_YTD + '  + floatToStr(h_amount) +
                        '  WHERE W_ID = ' + intToStr(w_id) +
                        '        ; ';
  SQLQuery1.ExecSQL();

  SQLQuery1.SQL.Text := 'SELECT W_STREET_1, W_STREET_2, W_CITY, W_STATE, W_ZIP, W_NAME ' +
                        '  FROM WAREHOUSE' +
                        '  WHERE w_id = ' + intToStr(w_id ) +
                        '        ; ';
  SQLQuery1.Open;
  w_street_1 := SQLQuery1.Fields[0].AsString;
  w_street_2 := SQLQuery1.Fields[1].AsString;
  w_city := SQLQuery1.Fields[2].AsString;
  w_state := SQLQuery1.Fields[3].AsString;
  w_zip := SQLQuery1.Fields[4].AsString;
  w_name := SQLQuery1.Fields[5].AsString;
  SQLQuery1.Close;

  SQLQuery1.SQL.Text := 'UPDATE DISTRICT SET D_YTD = D_YTD + ' + floatToStr(h_amount) +
                        '  WHERE D_W_ID = ' + intToStr(w_id) +
                        '    AND D_ID = ' + intToStr(d_id) +
                        '        ; ';
  SQLQuery1.ExecSQL();

  SQLQuery1.SQL.Text := 'SELECT D_STREET_1, D_STREET_2, D_CITY, D_STATE, D_ZIP, D_NAME ' +
                        '  FROM DISTRICT' +
                        '  WHERE D_W_ID = ' + intToStr(w_id) + ' AND D_ID = ' + intToStr(d_id) +
                        '        ; ';

  SQLQuery1.Open;
  d_street_1 := SQLQuery1.Fields[0].AsString;
  d_street_2 := SQLQuery1.Fields[1].AsString;
  d_city := SQLQuery1.Fields[2].AsString;
  d_state := SQLQuery1.Fields[3].AsString;
  d_zip := SQLQuery1.Fields[4].AsString;
  d_name := SQLQuery1.Fields[5].AsString;
  SQLQuery1.Close;

  if (ByName) then
    begin
      SQLQuery1.SQL.Text := 'SELECT COUNT(C_ID) ' +
                            '  FROM CUSTOMER ' +
                            '  WHERE C_LAST = ''' + c_last +
                            '''    AND C_D_ID = ' + intToStr(d_id) +
                            '    AND C_W_ID = ' + intToStr(w_id) +
                            '        ; ';
      SQLQuery1.Open;
      namecnt := SQLQuery1.Fields[0].AsInteger;
      SQLQuery1.Close;

      SQLQuery1.SQL.Text := 'SELECT C_FIRST, C_MIDDLE, C_ID, ' +
                            '       C_STREET_1, C_STREET_2, C_CITY, C_STATE, C_ZIP,' +
                            '       C_PHONE, C_CREDIT, C_CREDIT_LIM, ' +
                            '       C_DISCOUNT, C_BALANCE, C_SINCE ' +
                            '  FROM CUSTOMER ' +
                            '  WHERE C_W_ID = ' + intToStr(w_id) +
                            '    AND C_D_ID = ' + intToStr(d_id) +
                            '    AND C_LAST = ''' + c_last  +
                            '''  ORDER BY C_FIRST ' +
                            '         ; ';
      SQLQuery1.open;

      if (namecnt mod 2) = 1 then namecnt := namecnt + 1; // Locate mid point customer;
      for n := 0 to (namecnt div 2) - 1 do
        begin
          c_first := SQLQuery1.Fields[0].AsString;
          c_middle := SQLQuery1.Fields[1].AsString;
          c_id := SQLQuery1.Fields[2].AsInteger;
          c_street1 := SQLQuery1.Fields[3].AsString;
          c_street2 := SQLQuery1.Fields[4].AsString;
          c_city := SQLQuery1.Fields[5].AsString;
          c_state := SQLQuery1.Fields[6].AsString;
          c_zip := SQLQuery1.Fields[7].AsString;
          c_phone := SQLQuery1.Fields[8].AsString;
          c_credit := SQLQuery1.Fields[9].AsString;
          c_credit_lim := SQLQuery1.Fields[10].AsFloat;
          c_discount := SQLQuery1.Fields[11].AsFloat;
          c_balance := SQLQuery1.Fields[12].AsFloat;
          c_since := SQLQuery1.Fields[13].AsString;
          SQLQuery1.next;
        end;
      SQLQuery1.Close;
      if namecnt = 0 then exit;
    end
   else
    begin
      SQLQuery1.SQL.Text := 'SELECT C_FIRST, C_MIDDLE, C_LAST, ' +
                            '       C_STREET_1, C_STREET_2, C_CITY, C_STATE, C_ZIP,' +
                            '       C_PHONE, C_CREDIT, C_CREDIT_LIM, ' +
                            '       C_DISCOUNT, C_BALANCE, C_SINCE ' +
                            '  FROM CUSTOMER ' +
                            '  WHERE C_W_ID = ' + intToStr(w_id) +
                            '    AND C_D_ID = ' + intToStr(d_id) +
                            '    AND C_ID = ' + intToStr(c_id) +
                            '         ; ';
      SQLQuery1.Open;
      c_first := SQLQuery1.Fields[0].AsString;
      c_middle := SQLQuery1.Fields[1].AsString;
      c_last := SQLQuery1.Fields[2].AsString;
      c_street1 := SQLQuery1.Fields[3].AsString;
      c_street2 := SQLQuery1.Fields[4].AsString;
      c_city := SQLQuery1.Fields[5].AsString;
      c_state := SQLQuery1.Fields[6].AsString;
      c_zip := SQLQuery1.Fields[7].AsString;
      c_phone := SQLQuery1.Fields[8].AsString;
      c_credit := SQLQuery1.Fields[9].AsString;
      c_credit_lim := SQLQuery1.Fields[10].AsFloat;
      c_discount := SQLQuery1.Fields[11].AsFloat;
      c_balance := SQLQuery1.Fields[12].AsFloat;
      c_since := SQLQuery1.Fields[13].AsString;
      SQLQuery1.Close;
    end;

  c_balance := c_balance + h_amount;
  h_date := dateTimeTostr(now);
  if c_credit = 'BC' then
    begin
      SQLQuery1.SQL.Text := 'SELECT C_DATA ' +
                            '  FROM CUSTOMER ' +
                            '  WHERE C_W_ID = ' + intToStr(w_id) +
                            '    AND C_D_ID = ' + intToStr(d_id) +
                            '    AND c_id = ' + intToStr(c_id) +
                            '         ; ';
      SQLQuery1.Open;
      c_data := SQLQuery1.Fields[0].AsString;
      SQLQuery1.Close;

      c_new_data := intToStr(c_id) + intToStr(c_d_id) + intToStr(c_w_id) +
                    intToStr(d_id) + intToStr(w_id) + floatToStr(h_amount) +
                    h_date + h_data;
      c_new_data := copy(c_data,1,length(c_data) - (length(c_new_data) + 1));
      c_data := c_data + c_new_data;

      SQLQuery1.SQL.Text := 'UPDATE CUSTOMER ' +
                            '  SET C_BALANCE = ' + floatToStr(c_balance) +
                            '    , C_DATA = ''' + c_new_data +
                            '''  WHERE C_W_ID = ' + intToStr(c_w_id) +
                            '    AND C_D_ID = ' + intToStr(c_d_id) +
                            '    AND C_ID = ' + intToStr(c_id);
      SQLQuery1.ExecSQL();

    end
   else
    begin
      SQLQuery1.SQL.Text := 'UPDATE CUSTOMER ' +
                            '  SET C_BALANCE = ' + floatToStr(c_balance) +
                            '  WHERE C_W_ID = ' + intToStr(c_w_id) +
                            '    AND C_D_ID = ' + intToStr(c_d_id) +
                            '    AND C_ID = ' + intToStr(c_id);
      SQLQuery1.ExecSQL();
    end;
  h_data := w_name + ' ' + d_name;
{  strncpy(h_data,w_name,10);
  h_data[10]='\ 0';
  strncat(h_data,d_name,10);
  h_data[20]=' ';
  h_data[21]=' ';
  h_data[22]=' ';
  h_data[23]=' '; }

  h_date := DateTimeToStr(now);

  SQLQuery1.SQL.Text := 'INSERT INTO HISTORY ' +
                        '  ( H_C_ID, H_C_D_ID, H_C_W_ID, ' +
                        '    H_D_ID, H_W_ID, H_DATE, H_AMOUNT, H_DATA ) ' +
                        ' VALUES ( ' +
                            intToStr(c_id ) + ', '+ intToStr(c_d_id) + ', ' + intToStr(c_w_id) + ', ' +
                            intToStr(d_id) + ', ' + intToStr(w_id) + ', ''' + h_date + ''', ' + floatToStr(h_amount) + ', ''' + h_data +
                            '''        ); ';
  SQLQuery1.ExecSQL();

  SQLTransaction1.Commit();

  ListBox1.Items.Add('COMMIT PAYMENT Transaction for Warehouse: ' + intToStr(w_id));
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;

{  return(0);
  sqlerr:
  error(); }
end;

function TForm1.order_status(byName: boolean; c_id: Integer; c_last: string;
                             d_id: Integer; w_id: Integer): Integer; // The Order-Status Transaction
var
  namecnt: Integer;
  c_balance: double;
  c_first: string;
  c_middle: string;
  n: Integer;
  o_id: Integer;
  o_carrier_id: Integer;
  o_entry_d: string;
  i: Integer;
  ol_i_id: array[1..20] of Integer;
  ol_supply_w_id: array[1..20] of Integer;
  ol_quantity: array[1..20] of Integer;
  ol_amount: array[1..20] of double;
  ol_delivery_d: array[1..20] of string;
begin
  // EXEC SQL WHENEVER NOT FOUND GOTO sqlerr;
  // EXEC SQL WHENEVER SQLERROR GOTO sqlerr;

  result := 1;
  ListBox1.Items.Add('START ORDER STATUS Transaction for Warehouse: ' + intToStr(w_id));
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;

  if (byName) then
    begin

      SQLQuery1.SQL.Text := 'SELECT COUNT(C_ID) ' +
                            '  FROM CUSTOMER ' +
                            '  WHERE C_LAST = ''' + c_last +
                            '''    AND C_D_ID = ' + intToStr(d_id) +
                            '    AND C_W_ID = ' + intToStr(w_id) +
                            '        ; ';
      SQLQuery1.Open;
      namecnt := SQLQuery1.Fields[0].AsInteger;
      SQLQuery1.Close;

      SQLQuery1.SQL.Text := 'SELECT C_BALANCE, C_FIRST, C_MIDDLE, C_ID, ' +
                            '  FROM CUSTOMER ' +
                            '  WHERE C_W_ID = ' + intToStr(w_id) +
                            '    AND C_D_ID = ' + intToStr(d_id) +
                            '    AND C_LAST = ' + c_last +
                            '  ORDER BY C_FIRST ' +
                            '         ; ';
      SQLQuery1.open;

      if (namecnt mod 2) = 1 then namecnt := namecnt + 1; // Locate mid point customer;

      for n := 0 to (namecnt div 2) - 1 do
        begin
          c_balance := SQLQuery1.Fields[0].AsFloat;
          c_first := SQLQuery1.Fields[1].AsString;
          c_middle := SQLQuery1.Fields[2].AsString;
          c_id := SQLQuery1.Fields[3].AsInteger;
          SQLQuery1.next;
        end;

      SQLQuery1.Close;
      if namecnt = 0 then exit;

    end
   else
    begin
      SQLQuery1.SQL.Text := 'SELECT C_BALANCE, C_FIRST, C_MIDDLE, C_LAST ' +
                            '  FROM CUSTOMER ' +
                            '  WHERE C_W_ID = ' + intToStr(w_id) +
                            '    AND C_D_ID = ' + intToStr(d_id) +
                            '    AND C_ID = ' + intToStr(c_id) +
                            '         ; ';
      SQLQuery1.Open;
      c_balance := SQLQuery1.Fields[0].AsFloat;
      c_first := SQLQuery1.Fields[1].AsString;
      c_middle := SQLQuery1.Fields[2].AsString;
      c_last := SQLQuery1.Fields[3].AsString;
      SQLQuery1.Close;

    end;

  SQLQuery1.SQL.Text := 'SELECT O_ID, O_CARRIER_ID, O_ENTRY_D ' +
                        '  FROM ORDERS ' +
                        '  ORDER BY O_ID DESC ' +
                        '         ; ';
  SQLQuery1.Open;
  o_id := SQLQuery1.Fields[0].AsInteger;
  o_carrier_id := SQLQuery1.Fields[1].AsInteger;
  o_entry_d := SQLQuery1.Fields[2].AsString;
  SQLQuery1.Close;

  SQLQuery1.SQL.Text := 'SELECT OL_I_ID , OL_SUPPLY_W_ID , OL_QUANTITY,'+
                        '       OL_AMOUNT, OL_DELIVERY_D ' +
                        '  FROM ORDER_LINE ' +
                        '  WHERE OL_O_ID = ' + intToStr(o_id) +
                        '    AND OL_D_ID = ' + intToStr(d_id) +
                        '    AND OL_W_ID = ' + intToStr(w_id) +
                        '         ; ';
  SQLQuery1.Open;

  // EXEC SQL WHENEVER NOT FOUND CONTINUE;

  i := 0;

  while SQLQuery1.found do // (sql_notfound) do // cursor have rows
    begin
      i := i + 1;
      ol_i_id[i] := SQLQuery1.Fields[0].AsInteger;
      ol_supply_w_id[i] := SQLQuery1.Fields[1].AsInteger;
      ol_quantity[i] := SQLQuery1.Fields[2].AsInteger;
      ol_amount[i] := SQLQuery1.Fields[3].AsFloat;
      ol_delivery_d[i] := SQLQuery1.Fields[4].AsString;
      SQLQuery1.Next;
    end;

  SQLQuery1.Close;

  SQLTransaction1.Commit();

  ListBox1.Items.Add('COMMIT  ORDER STATUS Transaction for Warehouse: ' + intToStr(w_id));
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;

{  return(0);
  sqlerr:
  error(); }
end;

function TForm1.delivery(w_id: Integer): Integer; // The Delivery Transaction
var
  d_id: Integer;
  no_o_id: Integer;
  o_carrier_id: Integer;
  ol_delivery_d: string;
  ol_total: double;
  c_id: Integer;
begin
  // EXEC SQL WHENEVER SQLERROR GOTO sqlerr;

  // gettimestamp(datetime);
  // For each district in warehouse

  result := 1;
  ListBox1.Items.Add('START DELIVERY Transaction for Warehouse: ' + intToStr(w_id));
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;

  for d_id := 1 to DIST_PER_WARE do
    begin
      // EXEC SQL WHENEVER NOT FOUND GOTO sqlerr;

      // EXEC SQL WHENEVER NOT FOUND continue;
      SQLQuery1.SQL.Text := 'SELECT NO_O_ID ' +
                            '  FROM NEW_ORDER ' +
                            '  WHERE NO_D_ID = ' + intToStr(d_id) +
                            '    AND NO_W_ID = ' + intToStr(w_id) +
                            '  ORDER BY No_O_ID ASC' +
                            '         ; ';
      SQLQuery1.Open;
      no_o_id := SQLQuery1.Fields[0].AsInteger;
      SQLQuery1.Close;

      SQLQuery1.SQL.Text := 'DELETE FROM NEW_ORDER' +
                            '  WHERE NO_O_ID = ' + intToStr(no_o_id) +
                            '         ; ';
      SQLQuery1.ExecSQL();

      SQLQuery1.SQL.Text := 'SELECT O_C_ID ' +
                            '  FROM ORDERS ' +
                            '  WHERE O_ID = ' + intToStr(no_o_id) +
                            '  AND O_D_ID = ' + intToStr(d_id) +
                            '  AND O_W_ID = ' + intToStr(w_id) +
                            '         ; ';

      SQLQuery1.Open;
      c_id := SQLQuery1.Fields[0].AsInteger;
      SQLQuery1.Close;

      // The carrier number (O_CARRIER_ID) is randomly selected within [1 .. 10]
      o_carrier_id := random(10) + 1;
      SQLQuery1.SQL.Text := 'UPDATE ORDERS ' +
                            '  SET O_CARRIER_ID = ' + intToStr(o_carrier_id) +
                            '  WHERE O_ID = ' + intToStr(no_o_id) +
                            '   AND  O_D_ID = ' + intToStr(d_id) +
                            '   AND  O_W_ID = ' + intToStr(w_id) +
                            '         ; ';
      SQLQuery1.ExecSQL();

      ol_delivery_d := DateTimeToStr(date); // TimeStamp
      SQLQuery1.SQL.Text := 'UPDATE ORDER_LINE ' +
                            '  SET OL_DELIVERY_D = ''' + ol_delivery_d +
                            '''  WHERE OL_O_ID = ' + intToStr(no_o_id) +
                            '   AND  OL_D_ID = ' + intToStr(d_id) +
                            '   AND  OL_W_ID = ' + intToStr(w_id) +
                            '         ; ';
      SQLQuery1.ExecSQL();

      SQLQuery1.SQL.Text := 'SELECT SUM(OL_AMOUNT) ' +
                            '  FROM ORDER_LINE ' +
                            '  WHERE OL_O_ID = ' + intToStr(no_o_id) +
                            '    AND OL_D_ID = ' + intToStr(d_id) +
                            '    AND OL_W_ID = ' + intToStr(w_id) +
                            '         ; ';
      SQLQuery1.Open;
      ol_total := SQLQuery1.Fields[0].AsFloat;
      SQLQuery1.Close;


      SQLQuery1.SQL.Text := 'UPDATE CUSTOMER ' +
                            '  SET C_BALANCE = C_BALANCE + ' + floatToStr(ol_total) +
                            '  WHERE C_ID = ' + intToStr(c_id) +
                            '    AND C_D_ID = ' + intToStr(d_id) +
                            '    AND C_W_ID = ' + intToStr(w_id) +
                            '         ; ';
      SQLQuery1.ExecSQL();

      ListBox1.Items.Add('D: ' + intToStr(d_id) + ' O: ' + intToStr(no_o_id) + ' time: ' + DateTimeToStr(now));
      ListBox1.ItemIndex := ListBox1.Count - 1;
      ListBox1.Refresh;
    end;

  SQLTransaction1.Commit();

  ListBox1.Items.Add('COMMIT DELIVERY Transaction for Warehouse: ' + intToStr(w_id));
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;

{  return(0);
  sqlerr:
  error(); }
end;

function TForm1.stock_level(w_id: Integer; d_id: Integer): Integer; // The Stock-Level Transaction
// The threshold of minimum quantity in stock (threshold) is selected at random within [10 .. 20]
var
  o_id: Integer;
  threshold: Integer;
  stock_count: Integer;
begin
  // EXEC SQL WHENEVER NOT FOUND GOTO sqlerr;
  // EXEC SQL WHENEVER SQLERROR GOTO sqlerr;
  result := 1;
  ListBox1.Items.Add('START STOCK LEVEL Transaction for Warehouse: ' + intToStr(w_id));
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;

  SQLQuery1.SQL.Text := 'SELECT D_NEXT_O_ID ' +
                        '  FROM DISTRICT ' +
                        '  WHERE D_W_ID = ' + intToStr(w_id) +
                        '    AND D_ID   = ' + intToStr(d_id) +
                        '         ; ';
  SQLQuery1.Open;
  o_id := SQLQuery1.Fields[0].AsInteger;
  SQLQuery1.Close;

  threshold := random(11) + 10;

  SQLQuery1.SQL.Text := 'SELECT COUNT(DISTINCT(S_I_ID)) ' +
                        '  FROM ORDER_LINE, STOCK ' +
                        '  WHERE OL_W_ID = ' + intToStr(w_id) +
                        '    AND OL_D_ID = ' + intToStr(d_id) +
                        '    AND OL_O_ID < ' + intToStr(o_id) +
                        '    AND OL_O_ID >=' + intToStr(o_id - 20) +
                        '    AND S_W_ID = ' + intToStr(w_id) +
                        '    AND S_I_ID = ol_i_id' +
                        '    AND S_QUANTITY < ' + intToStr(threshold) +
                        '         ; ';
  SQLQuery1.Open;
  stock_count := SQLQuery1.Fields[0].AsInteger;
  SQLQuery1.Close;

  SQLTransaction1.Commit();

  ListBox1.Items.Add('COMMIT STOCK LEVEL Transaction for Warehouse: ' + intToStr(w_id));
  ListBox1.ItemIndex := ListBox1.Count - 1;
  ListBox1.Refresh;

{  return(0);
  sqlerr:
  error(); }
end;

procedure TForm1.FormClose(Sender: TObject; var CloseAction: TCloseAction);
begin
  SQLQuery1.Close;
  SQLTransaction1.Active := False;
  DBConnection.Connected := False;
end;

end.

